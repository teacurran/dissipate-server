version: "3.9"

x-api-base: &api-base
  image: api-server
  build:
    context: ./api
    dockerfile: src/main/docker/dev-jvm.dockerfile
  depends_on:
    - cassandra
    - postgresql
    - firebase-emulator
    - flyway
    - temporal
    - rabbitmq
  volumes:
    - ./api:/app
    - ~/.config/gcloud:/tmp/.config/gcloud
    - maven_cache:/app/.m2
    # use virtual volume if having issues with native binaries
    # - maven_target:/app/target
  environment:
    SERVICE: local
    FIREBASE_AUTH_EMULATOR_HOST: "firebase-emulator:9099"
    FIREBASE_STORAGE_EMULATOR_HOST: "firebase-emulator:9199"
    GCLOUD_PROJECT: "dissipate"
    REDIS_HOST: redis
    REDIS_PORT: 6379
    REDIS_PASSWORD: 98puOInkjbO&YiubkBt8guhvjhvredrg
    GOOGLE_APPLICATION_CREDENTIALS: /tmp/.config/gcloud/application_default_credentials.json
    quarkus.datasource.reactive.url: vertx-reactive:postgresql://postgresql:5432/dissipate
    quarkus.temporal.service.url: temporal:7233
    quarkus.datasource.username: dissipate
    quarkus.datasource.password: dissipate
    quarkus.hibernate-orm.database.generation: update
    quarkus.http.host: 0.0.0.0
    quarkus.opentelemetry.tracer.exporter.otlp.endpoint: http://jaeger:4317
  command: mvn quarkus:dev -Ddebug=true -DdebugHost=0.0.0.0

x-kafka-base: &kafka-base
  image: "wurstmeister/kafka:2.13-2.8.1"
  depends_on:
    - zookeeper

x-kafka-env: &kafka-env
  KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
  KAFKA_CREATE_TOPICS: "posts:3:1"
  KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
  KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE

services:
  api:
    <<: *api-base
    ports:
      - "5005:5005"
      - "8080:8080"
      - "9299:9000"

  postgresql:
    image: postgis/postgis
    restart: always
    environment:
      POSTGRES_USER: dissipate
      POSTGRES_PASSWORD: dissipate
      POSTGRES_DB: dissipate
    volumes:
      - postgres_db:/var/lib/postgresql/data
    ports:
      - "5442:5432"

  temporal-db:
    image: postgres:${POSTGRESQL_VERSION}
    restart: always
    environment:
      POSTGRES_USER: dissipate
      POSTGRES_PASSWORD: dissipate
      POSTGRES_DB: temporal
    volumes:
      - temporal_db:/var/lib/postgresql/data
    ports:
      - "5443:5432"

# Cassandra
  cassandra:
    image: cassandra:4.1
    ports:
      - 9042:9042
    volumes:
      - ~/apps/cassandra:/var/lib/cassandra
    environment:
      - CASSANDRA_CLUSTER_NAME=dissipate
      - CASSANDRA_DC=datacenter1

  temporal:
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    depends_on:
      - temporal-db
    environment:
      - TEMPORAL_ALLOW_NO_AUTH=true
      - DB=postgresql
      - POSTGRES_SEEDS=temporal-db
      - DB_PORT=5432
      - POSTGRES_USER=dissipate
      - POSTGRES_PWD=dissipate
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    ports:
      - 7233:7233
    volumes:
      - ./temporal/dynamicconfig:/etc/temporal/config/dynamicconfig
    labels:
      kompose.volume.type: configMap
  temporal-admin-tools:
    image: temporalio/admin-tools:${TEMPORAL_VERSION}
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    stdin_open: true
    tty: true
  temporal-ui:
    image: temporalio/ui:${TEMPORAL_UI_VERSION}
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    ports:
      - 8081:8080

  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16685:16685"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "4317:4317"
    environment:
      COLLECTOR_OTLP_ENABLED: "true"

  firebase-emulator:
    image: andreysenov/firebase-tools
    volumes:
      - ./firebase-emulator/:/home/node
    ports:
      - "4000:4000"
      - "5001:5000"
      - "8085:8085"
      - "9000:9000"
      - "9005:9005"
      - "9099:9099"
      - "9199:9199"
    command: firebase emulators:start --project dissipate --import /home/node/data

#  redis:
#    image: "redis:alpine"
#    restart: always
#    ports:
#      - '6379:6379'
#    command: redis-server --save 20 1 --loglevel warning --requirepass 98puOInkjbO&YiubkBt8guhvjhvredrg

  flyway:
    image: api-server
    build:
      context: ./api
      dockerfile: src/main/docker/dev-jvm.dockerfile
    depends_on:
      - postgresql
    volumes:
      - ./api:/app
      - maven_target:/app/target
      - maven_cache:/app/.m2
    command:
      - mvn
      - flyway:migrate
      - -Dflyway.url=jdbc:postgresql://postgresql:5432/dissipate
      - -Dflyway.user=dissipate
      - -Dflyway.password=dissipate

  integration-tests:
    <<: *api-base
    command: mvn verify

#  kafka-server1:
#    <<: *kafka-base
#    ports:
#      - '29092:29092'
#    environment:
#      <<: *kafka-env
#      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka-server1:9092,OUTSIDE://localhost:29092
#      KAFKA_LISTENERS: INSIDE://kafka-server1:9092,OUTSIDE://kafka-server1:29092
#
#  kafka-cat-internal:
#    image: confluentinc/cp-kafkacat
#    entrypoint: "kafkacat"
#    command: "-b kafka-server1:9092 -L -v"
#    profiles: ["development"]
#
#  kafka-cat-external:
#    image: confluentinc/cp-kafkacat
#    entrypoint: "kafkacat"
#    command: "-b host.docker.internal:29092 -L -d all"
#    profiles: ["development"]
#
#  kafka-ui:
#    image: provectuslabs/kafka-ui:latest
#    ports:
#      - '8080:8080'
#    environment:
#      KAFKA_CLUSTERS_0_NAME: dclocal-cluster
#      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-server1:9092
#    profiles: ["development"]

  rabbitmq:
    image: rabbitmq:3.11.3-management
    container_name: 'rabbitmq'
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
      - rabbitmq_logs:/var/log/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: dissipate
      RABBITMQ_DEFAULT_PASS: dissipate

  sonar-scanner:
    <<: *api-base
    command:
      - mvn
      - verify
      - sonar:sonar
      - -Dsonar.login=${SONAR_TOKEN}
      - -Dsonar.host.url=https://sonarcloud.io
      - -DGOOGLE_APPLICATION_CREDENTIALS=/app/cloudbuild_credentials.json

#  zookeeper:
#    image: 'wurstmeister/zookeeper:latest'
#    ports:
#      - '22181:2181'
#    environment:
#      - ALLOW_ANONYMOUS_LOGIN=yes

volumes:
  cassandra_data:
  postgres_db:
  maven_cache:
  maven_target:
  rabbitmq_data:
  rabbitmq_logs:
  temporal_db:

